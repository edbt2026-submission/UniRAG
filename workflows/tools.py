import json
import os
import time
from glob import glob

import faiss
import numpy as np
from transformers import AutoTokenizer

import os
os.environ["KMP_DUPLICATE_LIB_OK"]="TRUE"


def read_text_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        text = file.read()
    return text


def read_chunk(filename, index_L, index_S):
    chunk_path = f'Data/Chunks/{filename}_Small/{filename}_{index_L:03d}_{index_S:03d}.txt'
    chunk_text = read_text_file(chunk_path)
    return chunk_text


def count_txt_files(folder_path):
    # 初始化计数器
    count = 0

    # 遍历文件夹中的所有文件
    for filename in os.listdir(folder_path):
        # 检查文件是否是txt文件
        if filename.endswith(".txt"):
            count += 1

    return count


def append_dict_to_jsonl(file_path, dict_obj):
    """
    将字典对象追加到JSONL文件中。

    :param file_path: 目标JSONL文件的路径
    :param dict_obj: 要追加的字典对象
    """
    with open(file_path, 'a', encoding='utf-8') as f:
        f.write(json.dumps(dict_obj, ensure_ascii=False) + '\n')


# 直接把列表对象写入jsonl文件
def write_jsonl_file(file_path, data_list):
    with open(file_path, 'w', encoding='utf-8') as f:
        for item in data_list:
            f.write(json.dumps(item, ensure_ascii=False) + '\n')


# 清空jsonl文件
def reset_jsonl_file(file_path):
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write('')


# 读取JSONL文件为列表
def read_jsonl_to_list(file_path):
    data_list = []
    with open(file_path, 'r', encoding='utf-8') as file:
        for line in file:
            # 解析每一行的 JSON 对象
            json_obj = json.loads(line.strip())
            data_list.append(json_obj)
    return data_list


# 统计一个jsonl文件里的json行数
def count_lines(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return sum(1 for line in file)


def count_files(folder, prefix):
    """统计指定文件夹中以指定前缀开头的txt文件数量"""
    if not os.path.exists(folder):
        raise FileNotFoundError(f"文件夹 '{folder}' 不存在")
    if not os.path.isdir(folder):
        raise NotADirectoryError(f"'{folder}' 不是一个有效的文件夹路径")

    pattern = os.path.join(folder, f"{prefix}*.txt")
    return len(glob(pattern))


def extract_json(input_string):
    # 找到第一个 '{' 或 '[' 的位置
    start_index = min(
        input_string.find('{'),
        input_string.find('['),
        key=lambda x: x if x != -1 else float('inf')
    )
    # 找到最后一个 '}' 或 ']' 的位置
    end_index = max(
        input_string.rfind('}'),
        input_string.rfind(']'),
        key=lambda x: x if x != -1 else -float('inf')
    )
    # 如果找不到有效的起始或结束位置，返回 None
    if start_index == -1 or end_index == -1:
        return "无法解析json"

    # 提取 JSON 部分
    json_str = input_string[start_index:end_index + 1]
    return json_str


def sort_jsonl_file(input_file_path, output_file_path):
    # 读取文件并解析每一行为JSON对象
    with open(input_file_path, 'r', encoding='utf-8') as file:
        # 使用生成器表达式来加载每一行的JSON
        json_list = (json.loads(line) for line in file)

        # 按照index排序
        sorted_json_list = sorted(json_list, key=lambda x: (x['index']))


    # 将排序后的JSON对象写入新的JSONL文件
    with open(output_file_path, 'w', encoding='utf-8') as file:
        for json_obj in sorted_json_list:
            # 将JSON对象转换为字符串并写入文件，每个对象占一行
            file.write(json.dumps(json_obj, ensure_ascii=False) + '\n')


def find_elements_in_A_not_in_B(A, B):
    # 提取B中所有index的集合（用集合加速查找）
    b_indices = {item['index'] for item in B}

    # 返回A中所有index不在B中的元素
    return [item for item in A if item['index'] not in b_indices]


def remove_elements_inplace(lst, target_index):
    """直接修改原列表，删除所有匹配元素"""
    # 反向遍历避免索引错乱
    for i in range(len(lst)-1, -1, -1):
        if lst[i]['index'] == target_index:
            del lst[i]


def validate_entity(entity):
    required_keys = {"name", "type", "description"}
    if not required_keys.issubset(entity.keys()):
        return False
    return True


def validate_relationship(relationship):
    required_keys = {"source", "target", "description", "keywords", "strength"}
    if not required_keys.issubset(relationship.keys()):
        return False
    if not isinstance(relationship["keywords"], list):
        return False
    return True


def validate_keywords(keywords):
    if not isinstance(keywords, list):
        return False
    return True


def check_EX_format(filename):
    extract_result = read_jsonl_to_list(f"Data/{filename}/{filename}_EX.jsonl")
    right = 0
    wrong = 0
    right_list = []
    for er in extract_result:
        flag = 0
        json_list = er['EX']
        for each in json_list:
            if "entity" in each:
                if not validate_entity(each["entity"]):
                    flag = 1
                    print("结点出错：")
                    print(json.dumps(each, ensure_ascii=False))
            elif "relationship" in each:
                if not validate_relationship(each["relationship"]):
                    flag = 1
                    print("关系出错：")
                    print(json.dumps(each, ensure_ascii=False))
            elif "keywords" in each:
                if not validate_keywords(each["keywords"]):
                    flag = 1
                    print("关键词出错：")
                    print(json.dumps(each, ensure_ascii=False))
        if flag == 0:
            right += 1
            right_list.append(er)
        else:
            wrong += 1
    # reset_jsonl_file(f"Data/{filename}/{filename}_extract_result.jsonl")
    # write_jsonl_file(f"Data/{filename}/{filename}_extract_result.jsonl", right_list)
    print(f"{filename} 文件中，格式正确的数量为：{right} 错误的 JSON 数据数量为：{wrong}")
    print("格式检查完毕")


def search_similar_group(filename, vector, type, k):
    if type == "name":
        index = faiss.read_index(f"Vector/{filename}_name_index.faiss")
    elif type == "description":
        index = faiss.read_index(f"Vector/{filename}_description_index.faiss")
    else:
        index = faiss.read_index(f"Vector/{filename}_hybrid_index.faiss")

    D, I = index.search(np.array([vector]), k)
    groups = read_jsonl_to_list(f"Data/{filename}/{filename}_group_embedding.jsonl")

    for i, idx in enumerate(I[0]):
        group = groups[idx]
        distance = D[0][i]
        print(f"Top {i + 1}: group_id = {group['group_id']}, name = {group['group_name']}, distance = {distance}")


# 判断两个列表中是否有相同元素
def has_common_element(list1, list2):
    # 将列表转换为集合
    set1 = set(list1)
    set2 = set(list2)

    # 检查两个集合是否有交集
    if set1 & set2:
        return True
    else:
        return False


# 对字符串编码
def encode_string_by_tiktoken(content: str):
    # 加载Tokenizer
    tokenizer = AutoTokenizer.from_pretrained("deepseek_tokenizer")
    tokens = tokenizer.tokenize(content)
    print("处理好一条")
    return tokens


# 根据token限制截断列表
def truncate_list_by_token_size(list_data: list, max_token_size: int):
    if max_token_size <= 0:
        return []
    tokens = 0
    for i, data in enumerate(list_data):
        tokens += len(encode_string_by_tiktoken(data['text']))
        if tokens > max_token_size:
            return list_data[:i]
    return list_data


def truncate_list_by_token_size2(list_data: list, max_token_size: int):
    if max_token_size <= 0:
        return []
    tokens = 0
    for i, data in enumerate(list_data):
        tokens += len(encode_string_by_tiktoken(data))
        if tokens > max_token_size:
            return list_data[:i]
    return list_data


# chunks向量搜索
def search_chunks(filename, v, k):
    index = faiss.read_index(f"Vector/{filename}_chunk_index.faiss")
    D, I = index.search(np.array([v]), k)
    chunks = read_jsonl_to_list(f"Data/{filename}/{filename}_chunk_embedding.jsonl")

    result = []

    for i, idx in enumerate(I[0]):
        chunk = chunks[idx]
        distance = D[0][i]
        result.append(chunk)

    return result


def search_group(filename, v, k):
    index = faiss.read_index(f"Vector/{filename}_hybrid_index.faiss")
    D, I = index.search(np.array([v]), k)
    groups = read_jsonl_to_list(f"Data/{filename}/{filename}_group_embedding.jsonl")

    result = []
    for i, idx in enumerate(I[0]):
        group = groups[idx]
        distance = D[0][i]
        result.append({"group_id": group["group_id"], "group_name": group["group_name"], "description": group["description"], "distance": distance})
    return result


def search_relation(filename, v, k):
    index = faiss.read_index(f"Vector/{filename}_relation_index.faiss")
    D, I = index.search(np.array([v]), k)
    relations = read_jsonl_to_list(f"Data/{filename}/{filename}_relations_embedding.jsonl")

    result = []
    for i, idx in enumerate(I[0]):
        relation = relations[idx]
        distance = D[0][i]
        result.append({"relation_id": relation["id"], "description": relation["description"], "distance": distance})

    return result


def search_global(filename, v, k):
    index = faiss.read_index(f"Vector/{filename}_global_index.faiss")
    D, I = index.search(np.array([v]), k)
    globals = read_jsonl_to_list(f"Data/{filename}/{filename}_global_embedding.jsonl")

    result = []
    for i, idx in enumerate(I[0]):
        global_ = globals[idx]
        distance = D[0][i]
        result.append({"global_id": global_["global_id"], "global_name": global_["global_name"], "description": global_["description"], "distance": distance})
    return result


def count_list_tokens(list_data: list):
    tokenizer = AutoTokenizer.from_pretrained("deepseek_tokenizer")
    tokens = 0
    for data in list_data:
        tokens += len(tokenizer.tokenize(data))
    return tokens


if __name__ == '__main__':
    filename = "ydt"

    text = "下鸭总一郎为什么会被捉住做成火锅？"

    v = [-0.011254382319748402, -0.005255410913378, -0.031743600964546204, -0.022380247712135315, 0.016624540090560913, 0.058603569865226746, 0.05074569955468178, -0.005388517398387194, 0.018203459680080414, -0.0010528034763410687, -0.002450995147228241, -0.011649112217128277, 0.02015874721109867, -0.01511906087398529, -0.016266530379652977, 0.00042571124504320323, 0.036737389862537384, -0.023224785923957825, 0.035837773233652115, -0.0056501408107578754, -0.008573893457651138, -0.03132133185863495, -0.057612158358097076, 0.008881415240466595, 0.009175167419016361, 0.00676548108458519, 0.04799177125096321, -0.028475606814026833, -0.010345586575567722, -0.027355676516890526, -0.04531128332018852, 0.0014113876968622208, -0.0658005028963089, -0.05291212350130081, 0.030697109177708626, -0.05371994152665138, -0.014146005734801292, -0.0010740315774455667, -0.028383810073137283, 0.042594075202941895, -0.04476049542427063, -0.014641713351011276, 0.006040280219167471, -0.05052538588643074, -0.0335061140358448, -0.057905908674001694, -0.010997349396348, -0.009868239052593708, -0.009482689201831818, 0.014531555585563183, 0.0003356348897796124, -0.0018348039593547583, 0.04791833460330963, -0.004254817496985197, -0.02515253610908985, 0.028365449979901314, 0.03859170153737068, 0.05122304707765579, -0.0620918795466423, -0.010960630141198635, 0.007665097247809172, 0.010813754051923752, -0.017074348405003548, -0.012658885680139065, -0.0065359873697161674, 0.0591176375746727, -0.040170617401599884, -0.009583666920661926, -0.005760297644883394, 0.03045843541622162, 0.015504609793424606, 0.00884469598531723, -0.007100542541593313, -0.005461955443024635, -0.07813809812068939, 0.0013700787676498294, 0.021278677508234978, -0.03592957183718681, -0.047624580562114716, 0.06396455317735672, 0.02355525828897953, -0.004408578388392925, -0.03038499690592289, 0.02790646255016327, -0.0638543888926506, 0.036590512841939926, 0.020434139296412468, 0.014614174142479897, -0.005370158236473799, -0.04112531244754791, 0.0038532032631337643, -0.01014363206923008, -0.01344834454357624, -0.035066671669483185, -0.040941718965768814, 0.006017331033945084, -0.0524347759783268, 0.010005936026573181, 0.06154109537601471, -0.0072015197947621346, 0.0319271944463253, 0.051847271621227264, -0.0193509291857481, -0.005838325712829828, 0.01132782083004713, -0.02445487305521965, 0.013677838258445263, 0.03899560868740082, 0.0372147373855114, 0.015082341618835926, 0.04946053400635719, -0.010859653353691101, -0.04582534730434418, -0.019883355125784874, -0.03984014689922333, -0.050892576575279236, -0.003972540143877268, 0.024271277710795403, 0.03482799977064133, 0.01589933969080448, -0.05562933161854744, 0.023022832348942757, 0.049387093633413315, -0.04560503363609314, 0.009101729840040207, -0.01947944611310959, 0.03936279937624931, 0.017239583656191826, 0.02195798046886921, -0.001068867975845933, 0.023169707506895065, 0.047734737396240234, 0.001795790041796863, -0.043475329875946045, 0.012053021229803562, -0.02447323314845562, -0.036608871072530746, 0.04270423203706741, 0.01843295246362686, 0.028145136311650276, -0.0014263048069551587, -0.011401258409023285, 0.047734737396240234, -0.004449887201189995, 0.002909983042627573, -0.03943623602390289, -0.001686780364252627, -0.05889732390642166, 0.021388834342360497, -0.050121475011110306, -0.004860681481659412, 0.04527456313371658, -0.017111068591475487, -0.0262173879891634, -0.05074569955468178, -0.008606022223830223, -0.003660428337752819, 0.03873857483267784, -0.035837773233652115, 0.0025336130056530237, 0.004463656805455685, 0.022141573950648308, 0.026639655232429504, 0.0020298738963901997, -0.042630791664123535, 0.05394025519490242, -0.026547858491539955, 0.018928660079836845, 0.028402170166373253, -0.01861654780805111, -0.014256163500249386, -0.007972619496285915, 0.01521085761487484, -0.02265564166009426, 0.004665611777454615, -0.0051452540792524815, 0.03620496392250061, -0.015027263201773167, 0.010602619498968124, -0.033414315432310104, -0.05203086510300636, -0.009436790831387043, 0.0014182724989950657, -0.02186618186533451, 0.03559909760951996, 0.03528698906302452, -0.0061596170999109745, -0.008261782117187977, 0.016339968889951706, 0.009565306827425957, -0.03855498135089874, 0.020801329985260963, -0.00780738377943635, -0.048469118773937225, 0.006499268114566803, -0.016339968889951706, 0.05324259400367737, 0.0028021209873259068, -0.04788161441683769, -0.0007315119146369398, -0.051076170057058334, 0.014834487810730934, 0.015660665929317474, 0.031615085899829865, -0.011465516872704029, 0.036663949489593506, -0.0003161279018968344, -0.0457519106566906, 0.030586952343583107, -0.04975428432226181, -0.01929585076868534, -0.017524156719446182, 0.02783302403986454, 0.0018726704875007272, -0.01850639097392559, -0.012952637858688831, 0.03609480708837509, -0.027392396703362465, 0.014283702708780766, 0.0056501408107578754, 0.0077247656881809235, -0.0001810133398976177, 0.012805761769413948, 0.004181379452347755, -0.009120089001953602, -0.024785345420241356, 0.05423400551080704, 0.035856131464242935, -0.0712716355919838, -0.03525026887655258, 0.007155620958656073, 0.021535711362957954, -0.02010366879403591, -0.019975151866674423, 0.019222412258386612, 0.06591065973043442, 0.01779954880475998, 0.038297947496175766, -0.017450718209147453, 0.018947020173072815, -0.006444189697504044, 0.01611047424376011, 0.01672551780939102, 0.015605587512254715, 0.024069324135780334, 0.027575992047786713, 0.046853482723236084, 0.022490406408905983, -0.030697109177708626, 0.012245796620845795, -0.015403633005917072, 0.002037906087934971, -0.014834487810730934, 0.008091956377029419, 0.033249080181121826, -0.0011182092130184174, 0.015679026022553444, 0.01176844909787178, 0.06928880512714386, 0.019259130582213402, 0.023995885625481606, -0.009436790831387043, 0.03203735500574112, 0.010547541081905365, -0.014421398751437664, 0.023169707506895065, 0.00440169358626008, 0.035066671669483185, -0.020654454827308655, 0.018148381263017654, -0.0007194635109044611, -0.0039220512844622135, -0.008826336823403835, 0.03965655341744423, 0.02959553711116314, 0.03679246827960014, 0.03126625344157219, -0.021333755925297737, 0.024822063744068146, -0.011208483949303627, 0.06267938017845154, 0.011272742412984371, 0.027190441265702248, -0.03782059997320175, 0.03031155839562416, 0.017496617510914803, -0.005608831997960806, 0.049387093633413315, -0.016385866329073906, -0.04112531244754791, 0.018910299986600876, 0.023793932050466537, 0.02283923700451851, 0.011731729842722416, -0.037031140178442, -0.012016301974654198, 0.013026075437664986, -0.13769635558128357, 0.044136274605989456, -0.002223796211183071, 0.011511416174471378, -0.02689668908715248, -0.016578642651438713, -0.029889289289712906, 0.032367825508117676, -0.000477634253911674, 0.007054643705487251, -0.003926641307771206, -0.030954141169786453, -0.016321608796715736, -0.005673089995980263, -0.02695176750421524, 0.02540956810116768, -0.02026890404522419, -0.003933526109904051, 0.023298224434256554, -0.02529941126704216, 0.017010090872645378, -0.003254224080592394, 0.058677010238170624, -0.0021801923867315054, -0.017111068591475487, -0.018019864335656166, -0.0471472330391407, -0.039215922355651855, -0.001993154874071479, -0.024766985327005386, 0.03143148869276047, 0.05926451459527016, -0.004966248758137226, 0.00920729711651802, -0.019626321271061897, 0.004635777324438095, -0.010795394890010357, -0.01437550038099289, -0.0252443328499794, 0.024822063744068146, -0.017221225425601006, 0.07395212352275848, -0.02697012759745121, 0.03649871423840523, -0.027153722941875458, -0.05482150986790657, -0.025923635810613632, 0.018377874046564102, -0.0441729910671711, 0.0007837217999622226, 0.011493056081235409, 0.021407194435596466, -0.018359513953328133, -0.03815107047557831, 0.007935900241136551, 0.003414869774132967, -0.004704625811427832, -0.015807542949914932, 0.0037751751951873302, 0.05959498509764671, -0.05078241974115372, 0.05915435776114464, 0.023132989183068275, 0.025905275717377663, -0.01676223613321781, -0.013953231275081635, 0.04887302964925766, -0.0628262609243393, 0.023371662944555283, -0.0056547303684055805, 0.025483006611466408, 0.03873857483267784, 0.030109604820609093, -0.03958311304450035, -0.011034068651497364, 0.022159934043884277, -0.03277173265814781, -0.014366320334374905, -0.0010631306795403361, -0.1009773313999176, -0.0021652751602232456, 0.025629881769418716, -0.008716179989278316, 0.037673722952604294, -0.039326079189777374, 0.0037705854047089815, 0.02447323314845562, 0.019828276708722115, 0.05151679739356041, 0.17125755548477173, 0.040794841945171356, 0.008137854747474194, 0.00465643173083663, 0.06884817779064178, -0.02878771908581257, 0.00720610935240984, -0.028090057894587517, -0.05922779440879822, -0.009473510086536407, -0.007412653882056475, -0.006035690661519766, 0.004346615169197321, -0.002565742237493396, 0.008739128708839417, 0.04571519047021866, -0.02799825929105282, -0.021297037601470947, 0.05599651858210564, 0.0004294405225664377, -0.042557355016469955, -0.06216531619429588, -0.02603379264473915, 0.01691829226911068, -0.022343529388308525, 0.0092577850446105, -1.4361300600285176e-05, 0.03728817403316498, 0.023169707506895065, -0.012144818902015686, -0.060182489454746246, -0.02528105117380619, 0.02006695047020912, -0.012925098650157452, -0.014026668854057789, -0.021737664937973022, 0.006370751652866602, -0.04711051657795906, -0.009482689201831818, 0.021700946614146233, -0.012557907961308956, -0.014944644644856453, -0.03818779066205025, 0.012530368752777576, 0.0010143631370738149, -0.028916236013174057, -0.014072568155825138, 0.01680813543498516, -0.05375665798783302, -0.03275337442755699, 0.027429115027189255, -0.061871565878391266, -0.011428797617554665, 0.0012472994858399034, 0.0054803150705993176, -0.06168796867132187, 0.013852253556251526, -0.019259130582213402, -0.013356546871364117, 0.03515847027301788, 0.017863808199763298, 0.037526849657297134, -0.031761959195137024, 0.043401893228292465, 0.0026300004683434963, 0.042594075202941895, 0.008353578858077526, 0.00780738377943635, 0.01757005602121353, 0.011952044442296028, -0.008188343606889248, -0.013576861470937729, 0.0005634076078422368, 0.011942864395678043, 0.020782969892024994, 0.04013390094041824, 0.012521188706159592, 0.034258853644132614, 0.022270090878009796, -0.004587583709508181, -0.024895502254366875, -0.03972999006509781, -0.055959802120923996, -0.01058426033705473, 0.0033965101465582848, -0.00503050722181797, 0.025079097598791122, 0.013016896322369576, 0.054454319179058075, -0.04707379639148712, 0.0021882245782762766, 0.004195149056613445, 0.011180944740772247, -0.06734269857406616, 0.002140030963346362, -0.04457690194249153, -0.00713726133108139, -0.009198117069900036, -0.007890001870691776, 0.01050164271146059, 0.006242235191166401, -0.01853393018245697, 0.0008606022456660867, -0.014054208993911743, 0.04042765125632286, -0.0571715272963047, 0.017900526523590088, -0.009124678559601307, -0.0017820204375311732, -0.034222137182950974, 0.012530368752777576, 0.027227159589529037, 0.006655324250459671, -0.007862462662160397, 0.036663949489593506, -0.025795118883252144, 0.03796747699379921, 0.00629731360822916, 0.005741938482969999, 0.026602936908602715, 0.02785138413310051, -0.033377598971128464, -0.02271072007715702, -0.03543386235833168, -0.006811379920691252, -0.0693255290389061, 0.03258813917636871, 0.01309033390134573, -0.005360978189855814, 0.0202321857213974, -0.0009277292410843074, -0.006228465586900711, -0.05485823005437851, 0.03616824373602867, 0.03029320016503334, -0.020874768495559692, 0.0004805029311683029, 0.013604400679469109, -0.009996755979955196, -0.0353604257106781, 0.018928660079836845, 0.011915325187146664, 0.010363945737481117, 0.03528698906302452, 0.024987298995256424, 0.030660388991236687, -0.04409955441951752, -0.0045439801178872585, -0.021664228290319443, -0.00022705555602442473, 0.041859693825244904, 0.037600286304950714, -0.03732489421963692, -0.03128461167216301, -0.015284296125173569, -0.02943030185997486, 0.006494678556919098, -0.03295532986521721, 0.014522376470267773, -0.021278677508234978, 0.014568274840712547, 0.025905275717377663, -9.021980076795444e-05, 0.03613152354955673, 0.03280845284461975, 0.026694733649492264, -0.015357733704149723, -0.0016913702711462975, -0.0034194595646113157, -0.040868278592824936, -0.026437701657414436, -0.029999447986483574, -0.01842377334833145, 0.028842797502875328, 0.012484470382332802, -0.05999889597296715, -0.006164207123219967, 0.009211886674165726, 0.018001504242420197, 0.035911209881305695, 0.016468483954668045, -0.0032679936848580837, 0.03771044313907623, -0.001582360710017383, 0.0017900527454912663, -0.01929585076868534, -0.03266157582402229, -0.010786214843392372, -0.0015421992866322398, -0.012576268054544926, -0.018166739493608475, 0.09348665177822113, 0.018735885620117188, -0.01303525548428297, -0.06363407522439957, 0.0015846556052565575, 0.02190290205180645, 0.04068468511104584, 0.015412813052535057, -0.04461362212896347, 0.02687832899391651, 0.006251414772123098, -0.008110315538942814, 0.051149606704711914, -0.038371384143829346, -0.08247093856334686, -0.002926047658547759, 0.06866458803415298, -0.01955288276076317, -0.03980342671275139, 0.02025054395198822, 0.026786532253026962, 0.016193091869354248, -0.0066140154376626015, -0.04633941501379013, -0.030733827501535416, 0.015137420035898685, 0.05838325619697571, 0.010180351324379444, -0.045054249465465546, -0.016468483954668045, -0.01003347523510456, 0.025831837207078934, -0.0042915367521345615, 0.010492462664842606, -0.01432042196393013, 0.011704190634191036, -0.06154109537601471, -0.02032398246228695, 0.04780817776918411, 0.006939896382391453, 0.08863973617553711, 0.034919798374176025, 0.02285759523510933, 0.025629881769418716, 0.024032603949308395, -0.017212044447660446, -0.011006529442965984, -0.021352116018533707, -0.0176343135535717, -0.03262485936284065, -0.017248764634132385, 0.04913005977869034, -0.01938764750957489, -0.0024050965439528227, 0.020764611661434174, -0.041859693825244904, -0.04296126589179039, 0.0593012310564518, 0.05640042945742607, -0.0003904265468008816, 0.03866513818502426, 0.028126776218414307, -0.006604835391044617, 0.029375223442912102, -0.020929846912622452, -0.013264749199151993, -0.02711700275540352, -0.06444189697504044, -0.03859170153737068, 0.012053021229803562, 0.019956791773438454, -0.020672813057899475, -0.007839513011276722, -0.011841886676847935, -0.02854904532432556, 0.05371994152665138, 0.005521623883396387, -0.013723737560212612, 0.009950856678187847, 0.00847291573882103, -0.021260317414999008, -0.0019151269225403666, -0.06620441377162933, 0.028053337708115578, 0.01008855365216732, -0.03363463282585144, 0.03811435401439667, 0.06491924077272415, 0.08166312426328659, -0.002551972633227706, -0.0424104779958725, 0.0030430895276367664, 0.00716480053961277, -0.03466276451945305, -0.00922106672078371, -0.022325169295072556, -0.0005298441392369568, -0.0406479649245739, 0.0017636609263718128, -0.05794262886047363, -0.053646501153707504, -0.05258164927363396, 0.02794318087399006, -0.036719027906656265, -0.016303248703479767, -0.012870020233094692, -0.02610722929239273, -0.006577296182513237, -0.014696791768074036, -0.050966013222932816, -0.002804415998980403, -0.0027401575352996588, -0.008252602070569992, 0.010767855681478977, -0.011144225485622883, -0.011456336826086044, -0.04446674510836601, 0.032422903925180435, -0.004479721654206514, 0.04813864827156067, -0.05849341303110123, 0.04141906648874283, 0.008610612712800503, -0.027392396703362465, -0.003887627273797989, -0.021498991176486015, 0.005539983510971069, -0.00671040266752243, -0.0020115142688155174, 0.01602785661816597, -0.010822934098541737, 0.0076788668520748615, 0.06620441377162933, -0.011713370680809021, 0.04916677996516228, -0.04314485937356949, 0.002260515233501792, 0.02948538027703762, -0.05302228033542633, -0.015605587512254715, -0.043989397585392, -0.0014263048069551587, 0.010721956379711628, 0.013778815977275372, 0.08195687085390091, 0.003834843635559082, -0.027374036610126495, 0.018102481961250305, -0.03121117502450943, 0.004952479153871536, 0.019681399688124657, -0.01783626899123192, -0.025758398696780205, 0.006421240512281656, 0.009611206129193306, -0.0012346773874014616, 0.02777794562280178, -0.02774122729897499, -0.024656828492879868, -0.004052862990647554, 0.0795334205031395, -0.022325169295072556, -0.04277766868472099, 0.004879041109234095, 0.004521030467003584, -0.00780738377943635, 0.03826122730970383, 0.0756411999464035, 0.051002733409404755, -0.04531128332018852, 0.005319669377058744, -0.0030224351212382317, 0.012851660139858723, -0.018304435536265373, 0.0170284491032362, 0.012732323259115219, 0.011887785978615284, -0.021682586520910263, -0.005246231332421303, -0.01096981018781662, -0.0017510387115180492, 0.03374478965997696, 0.03306548669934273, -0.021480632945895195, 0.013742096722126007, -0.06910521537065506, -0.023132989183068275, -0.001977090258151293, -0.014283702708780766, 0.007610018830746412, -0.02535448968410492, -0.00338962534442544, -0.0015789183089509606, 0.06785676628351212, -0.0004974281182512641, 0.007330036256462336, -0.012989357113838196, 0.026419341564178467, -0.048432398587465286, -0.04457690194249153, 0.015761643648147583, -0.07130835205316544, -0.009101729840040207, -0.12124623358249664, 0.011465516872704029, -0.012502829544246197, 0.0016982550732791424, -0.024675188586115837, 0.041786257177591324, -0.02706192433834076, 0.01259462721645832, -0.01562394667416811, 0.046082381159067154, -0.03958311304450035, 0.023885728791356087, 0.05643714964389801, -0.02542792819440365, 0.0024028015322983265, -0.018185099586844444, -0.0017682507168501616, -0.007545760367065668, 0.020617734640836716, -0.005755708087235689, -0.0009133858839049935, -0.03343267738819122, 0.04024405777454376, 0.00845914613455534, -0.011970403604209423, 0.030127963051199913, -0.012438571080565453, 0.0424104779958725, -0.03216587007045746, 0.021241959184408188, -0.029118189588189125, 0.015073161572217941, -0.007752304896712303, 0.030054526403546333, 0.026566218584775925, -0.03778387978672981, 0.004383333958685398, -0.02372049354016781, 0.03299204632639885, -0.028108417987823486, -0.022490406408905983, 0.01697337068617344, -0.04707379639148712, -0.020672813057899475, -0.02768614888191223, 0.0809287428855896, -0.02786974422633648, 0.022490406408905983, -0.0010866537922993302, -0.00696743605658412, 0.03884873166680336, 0.010988169349730015, 0.0844537690281868, 0.0011853361502289772, 0.018708346411585808, 0.003407984972000122, 0.04666988551616669, 0.007669687271118164, -0.06939896941184998, 0.05640042945742607, -0.03618660196661949, -0.0009489574003964663, 0.009294504299759865, -0.005461955443024635, 0.0059530725702643394, 0.009638745337724686, -0.015770822763442993, 0.00776607496663928, -0.011217663995921612, 0.052728526294231415, -0.030752187594771385, -0.002032168908044696, 0.02096656523644924, -0.048469118773937225, -0.02030562423169613, 0.003970244899392128, 0.035048313438892365, -0.04230032116174698, -0.07149194926023483, -0.02364705502986908, -0.00194151874165982, 0.03631512075662613, -0.01924077235162258, -0.015330194495618343, -0.009969216771423817, 0.02860412374138832, -0.024840423837304115, 0.01306279469281435, -0.050194911658763885, -0.013301468454301357, -0.01927749067544937, -0.016294069588184357, 0.006467138882726431, -0.007922130636870861, 0.008179163560271263, 0.030807266011834145, 0.018111661076545715, 0.002199699403718114, -0.017891347408294678, -0.03785732015967369, -0.006508448161184788, -0.02711700275540352, -0.002988011110574007, -0.030697109177708626, -0.040794841945171356, 0.009510228410363197, 0.015376093797385693, -0.0371229387819767, 0.008798797614872456, 0.025886915624141693, -0.034313932061195374, 0.022141573950648308, -0.042630791664123535, -0.012576268054544926, -0.050231631845235825, 0.019901713356375694, 0.03899560868740082, -0.006687453482300043, -0.0034928976092487574, 0.025134176015853882, -0.02032398246228695, -0.02783302403986454, 0.02115016058087349, -0.04861599579453468, 0.04219016432762146, -0.05742856115102768, 0.011116686277091503, 0.06447861343622208, -0.01609211415052414, 0.01300771627575159, 0.009877419099211693, 0.020819690078496933, 0.05397697165608406, 0.0608801506459713, -0.040941718965768814, -0.028383810073137283, -0.046780042350292206, 0.02351853810250759, -0.03348775580525398, -0.014504016377031803, 0.007013334427028894, -0.002581806853413582, -0.033377598971128464, 0.01760677434504032, 0.008124085143208504, 0.035066671669483185, 0.030201401561498642, -0.021590789780020714, -0.04226360470056534, -0.036572154611349106, 0.01785462722182274, 0.010850473307073116, 0.0626426637172699, -0.008601432666182518, 0.04788161441683769, -0.01776283048093319, 0.008527995087206364, -0.043989397585392, 0.05566604807972908, -0.033395957201719284, 0.03771044313907623, 0.003972540143877268, 0.022931033745408058, 0.01690911315381527, -0.019828276708722115, 0.00424334267154336, -0.006976615637540817, 0.008385708555579185, 0.0021205239463597536, -0.05900748074054718, -0.04141906648874283, 0.022288450971245766, -0.015669845044612885, -0.03385494649410248, 0.0025336130056530237, -0.009400071576237679, 0.025134176015853882, -0.033359237015247345, -0.03884873166680336, -0.013503422960639, 0.019002098590135574, -0.006113718263804913, -0.013182131573557854, 0.0424104779958725, -0.0012622165959328413, 0.06256922334432602, 0.00272179814055562, 0.0001367640361422673, 0.01682649552822113, -0.012915918603539467, -0.009294504299759865, -0.046853482723236084, -0.004491196479648352, -0.015697384253144264, 0.019663039594888687, -0.017964785918593407, 0.001620227238163352, 0.031615085899829865, -0.006990385241806507, 0.020746251568198204, -0.02856740541756153, 0.02351853810250759, -0.04791833460330963, -0.021333755925297737, -0.0017200569855049253, -0.013576861470937729, -0.0019977446645498276, 0.013677838258445263, -0.026713093742728233, 0.026566218584775925, 0.005829146131873131, 0.005847505293786526, -0.006008150987327099, 0.03859170153737068, 0.03045843541622162, -0.0023419857025146484, -0.0068389191292226315, -0.022343529388308525, -0.02697012759745121, 0.04578863084316254, -0.03021976165473461, 0.022490406408905983, 0.014081748202443123, 0.04545816034078598, 0.05504182353615761, -0.004397103562951088, -0.05985201895236969, -0.006136667914688587, 0.005705219227820635, -0.04057452827692032, 0.05474807322025299, -0.07968029379844666, -0.03648035600781441, 0.055262140929698944, -0.04310813918709755, 0.006646144203841686, 0.028126776218414307, 0.0003459620929788798, -0.012512009590864182, 0.010758675634860992, 0.014696791768074036, 0.04479721561074257, -0.07857872545719147, 0.014926285482943058]

    vector = np.array(v, dtype=np.float32)

    ans = search_group(filename, vector, 10)
    for a in ans:
        print(a)

    # sort_jsonl_file(filename, filename)
    print("你跑了tools文件的main方法，检查一下是不是哪里出错了？")